x = "Change in Payroll",
y = "Change in Win Percentage")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("grid")
install.packages("grid")
library(ggplot2)
library(grid)
knitr::opts_chunk$set(echo = params$printcode, results = "hide", fig.width=8, fig.height=4)
options(scipen = 0, digits = 3)  # controls base R output
# check if you have ISLR package, if not, install it
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(ISLR, readxl, tidyverse, magrittr, dplyr, ggplot2, gridExtra)
survey_data = read_csv('Survey_results_final.csv')
#get selected columns and change datatypes of numeric columnss
cleaned_survey_data = survey_data %>% select("Answer.Age", "Answer.Gender", "Answer.Education", "Answer.HouseHoldIncome", "Answer.Sirius Radio", "Answer.Wharton Radio", "WorkTimeInSeconds") %>% rename(c(age = Answer.Age, gender = Answer.Gender, education = Answer.Education, income = Answer.HouseHoldIncome, sirius = "Answer.Sirius Radio", wharton = "Answer.Wharton Radio", worktime = WorkTimeInSeconds)) %>% mutate(across(c(age, worktime), as.integer))
#get unique values for each column
lapply(cleaned_survey_data, unique)
print(nrow(cleaned_survey_data[xor(rowSums(is.na(cleaned_survey_data)) > 0, cleaned_survey_data$education == "select one") | (rowSums(is.na(cleaned_survey_data)) > 0 & cleaned_survey_data$education == "select one"), ]))
#drop missing values
final_survey_data = cleaned_survey_data[rowSums(is.na(cleaned_survey_data)) == 0 & cleaned_survey_data$education != "select one", ]
final_survey_data %>% filter(age == 4 | age == 223)
final_survey_data = final_survey_data %>% filter(age != 4 & age != 223)
cat("Sample size: ", nrow(final_survey_data))
summary(final_survey_data)
box_p1 <- ggplot(final_survey_data) +
geom_boxplot(aes(x = "", y = age)) +
labs(title = "Boxplot of Age of Survey Respondents", x = "")
box_p2 <- ggplot(final_survey_data) +
geom_boxplot(aes(x = "", y = worktime)) +
labs(title = "Boxplot of Worktime of Survey Repondents", x = "")
grid.arrange(box_p1, box_p2, ncol = 2)
ggplot(final_survey_data) +
geom_bar(aes(x = gender), fill = "light green") +
labs( title = "Histogram of Gender", x = "Gender" , y = "Frequency")
hist_p1 <- ggplot(final_survey_data) +
geom_bar(aes(x = education), fill = "blue") +
labs( title = "Histogram of Education", x = "Education Level" , y = "Frequency") +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10))
hist_p2 <- ggplot(final_survey_data) +
geom_bar(aes(x = income), fill = "light blue") +
labs( title = "Histogram of Income", x = "Income" , y = "Frequency")
grid.arrange(hist_p1, hist_p2, nrow = 2)
hist_p3 <- ggplot(final_survey_data) +
geom_bar(aes(x = sirius), fill = "maroon") +
labs( title = "Histogram of Sirius Listeners", x = "Sirius Listener?" , y = "Frequency")
hist_p4 <- ggplot(final_survey_data) +
geom_bar(aes(x = wharton), fill = "slateblue1") +
labs( title = "Histogram of Wharton Listeners", x = "Wharton Listener?" , y = "Frequency")
grid.arrange(hist_p3, hist_p4, nrow = 2)
#get distribution of education data
final_survey_data %>% count(education) %>% mutate(n, n / sum(n))
#get proportion p of wharton listener out of the sirius listeners
prop_table = final_survey_data %>% filter(sirius == "Yes") %>% count(sirius, wharton) %>% mutate(n, p = n / sum(n)) %>% filter(wharton == "Yes")
prop_table
cat("Our estimation of the audiance size is: ", 51600000 * prop_table$p[1])
#install.packages("readxl")
library("readxl")
degree_data = read_excel('WomenData_06_16.xlsx')
# Most variable names are already clean
degree_data <- degree_data %>% rename(Field = `Field and sex`, Number = `Degrees Awarded`)
str(degree_data)
summary(degree_data)
# Changing Degree and Sex to factors for data consistency
degree_data[,c('Degree','Sex')] <- lapply(degree_data[,c('Degree','Sex')], as.factor)
# Chaning Year and Number to integers for data consistency
degree_data[,c('Year','Number')] <- lapply(degree_data[,c('Year','Number')], as.integer)
str(degree_data)
summary(degree_data)
sum(is.na(degree_data))
summary(degree_data)
length(unique(degree_data$Field))
# Create another variable that codes the field into S&E or Non-S&E
degree_data %<>% mutate(ScienceField = ifelse(Field != "Non-S&E" , "S&E", "Non-S&E"))
sum(degree_data[which(degree_data$Degree == 'BS' & degree_data$Year == 2015 & degree_data$Sex == "Male" & degree_data$ScienceField == "S&E"), 5])
sum(degree_data[which(degree_data$Degree == 'BS' & degree_data$Year == 2015 & degree_data$Sex == "Male" & degree_data$ScienceField == "Non-S&E"), 5])
degree_data %>%
# Only take data that are BS degrees in 2015
filter(Degree == 'BS' & Year == 2015) %>%
ggplot(aes(x = Sex, y = Number, fill = ScienceField)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(scales = "free_y") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Degrees granted across gender by field type")
degree_data %>%
# Only take data that are BS degrees in 2015
filter(Degree == 'BS' & Year == 2015) %>%
ggplot(aes(x = ScienceField, y = Number, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(scales = "free_y") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Degrees granted across field type by gender")
degree_data %>%
# Filter to only 2015
filter(Year == 2015) %>%
ggplot(aes(x = ScienceField, y = Number, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Degree~., scales = "free_y") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Degrees granted across field type by degree and gender")
degree_data %>%
# Filter to only 2015
filter(Year == 2015) %>%
ggplot(aes(x = Sex, y = Number, fill = ScienceField)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Degree~., scales = "free_y") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Degrees granted across gender by degree and field type")
degree_data %>%
# Filter to only 2015
filter(Year == 2015) %>%
ggplot(aes(x = Degree, y = Number, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(ScienceField~., scales = "free_y") +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Degrees granted across degree by field type and gender")
degree_data %>%
group_by(ScienceField, Sex) %>%
summarise(ScienceField_number = sum(Number)) %>%
group_by(ScienceField) %>%
mutate(ratio = ScienceField_number / sum(ScienceField_number))
degree_data %>%
group_by(ScienceField, Sex, Degree) %>%
summarise(ScienceField_number = sum(Number)) %>%
group_by(ScienceField, Degree) %>%
mutate(ratio = ScienceField_number / sum(ScienceField_number))
degree_data %>%
group_by(ScienceField, Sex, Year, Degree) %>%
summarise(ScienceField_number = sum(Number)) %>%
ggplot(aes(x = Year, y = ScienceField_number, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(ScienceField~Degree, scales = "free_y") +
ggtitle("Degrees granted across time by sex, degree and SE")
degree_data %>%
group_by(ScienceField, Sex, Year, Degree) %>%
summarise(ScienceField_number = sum(Number)) %>%
ggplot(aes(x = Year, y = ScienceField_number, fill = Sex)) +
geom_bar(stat = "identity", position = "fill") +
facet_grid(ScienceField~Degree, scales = "free_y") +
ggtitle("Degrees granted proportion by sex across degree and SE")
degree_data %>%
group_by(ScienceField, Sex, Year) %>%
summarise(ScienceField_number = sum(Number)) %>%
group_by(ScienceField, Year) %>%
mutate(ratio = ScienceField_number / sum(ScienceField_number)) %>%
filter(Sex == "Female") %>%
ggplot(aes(x = Year, y = ratio, color = ScienceField)) +
geom_point() + geom_line() +
ggtitle("Female proportion in SE/non-SE across year")
degree_data %>%
group_by(ScienceField, Sex, Year, Degree) %>%
summarise(ScienceField_number = sum(Number)) %>%
group_by(ScienceField, Year, Degree) %>%
mutate(ratio = ScienceField_number / sum(ScienceField_number)) %>%
filter(Sex == "Female") %>%
ggplot(aes(x = Year, y = ratio, color = ScienceField)) +
geom_point() + geom_line() +
facet_grid(~Degree)+
ggtitle("Female proportion in SE/non-SE across year by degree")
# Create another variable that codes the field into DS or Non-DS
degree_data %<>% mutate(DataScience = ifelse(Field != "Mathematics and statistics" & Field != "Computer sciences", "Non-DS", "DS"))
degree_data %>%
filter(DataScience == "DS") %>%
ggplot(aes(x = Year, y = Number, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(scales = "free_y") +
ggtitle("Data science related degrees granted by year")
degree_data %>%
filter(DataScience == "DS") %>%
ggplot(aes(x = Year, y = Number, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(~Degree, scales = "free_y") +
ggtitle("Data science related degrees granted by year")
baseball <- read_csv("baseball.csv")
payData <- read_csv("MLPayData_Total.csv")
#let's look at the differences for 2013
payData$p2013 - payData$p2012
log(payData$p2013) - log(payData$p2012)
summary(payData$p2013 - payData$p2012)
summary(log(payData$p2013) - log(payData$p2012))
#creating the diff_log function
baseball$diff_log <- log(baseball$payroll) - lag(log(baseball$payroll))
#note we set the year 1998 to NA since the row before is a different team, and
#that is the first year that we have data for
baseball$diff_log[baseball$year==1998] <- NA
#creating long table
baseballNew <- baseball[,c("team", "year", "diff_log", "win_pct")]
#payroll differences between 2010 and 2014 (p2014-p2010)
#make a new data set with just 2010 and 2014
tenFourteen <- subset(baseballNew, year == 2010 | year == 2014)
tenFourteen$fourYearDiff <- tenFourteen$diff_log - lag(tenFourteen$diff_log)
i <- seq(1, 60, 2)
#we set odd numbers to NA since we don't need the differences for different teams
tenFourteen$fourYearDiff[i] <- NA
j <- order(tenFourteen$fourYearDiff, decreasing = TRUE)[1:5]
tenFourteen[j,c("team", "fourYearDiff")]
#determining biggest percent gain in wins
tenFourteen$pctChange <- tenFourteen$win_pct - lag(tenFourteen$win_pct)
i <- seq(1, 60, 2)
#we set odd numbers to NA since we don't need the differences for different teams
tenFourteen$pctChange[i] <- NA
j <- order(tenFourteen$pctChange, decreasing = TRUE)
tenFourteen[j,c("team", "pctChange")]
#creating the win_pct_change function
baseball$win_pct_change <- log(baseball$win_pct) - lag(log(baseball$win_pct))
#note we set the year 1998 to NA since the row before is a different team, and
#that is the first year that we have data for
baseball$win_pct_change[baseball$year==1998] <- NA
# create average change in winning percentage and diff_log for each team
data_agg <-baseball %>%
group_by(team) %>%
summarise(
diff_log_avg = mean(diff_log, na.rm = TRUE),
win_pct_ave = mean(win_pct_change, na.rm = TRUE))
str(data_agg)
summary(data_agg)
# now let's look at the averages on a plot and see if there is some relationship
#install.packages("ggrepel")
library(ggrepel)
data_agg %>%
ggplot(aes(x = diff_log_avg, y = win_pct_ave)) +
geom_point(color = "blue", size= 2, alpha = .8) +
geom_text_repel(aes(label = team), size = 3) +
labs(title = "MLB Team's Win Percent  vs. Change in Payroll",
x = "Average Change in Payroll",
y = "Win_pct_ave")
cor(data_agg$diff_log_avg, data_agg$win_pct_ave)
# we remove the NA functions to make it easier to plot the graphs and compute the correlation
baseballSubset <- subset(baseball, !is.na(diff_log) & !is.na(win_pct_change))
baseballSubset %>%
ggplot(aes(x = diff_log, y = win_pct_change)) +
geom_point(color = "blue", size= 2) +
labs(title = "MLB Team's Win Percent  vs. Change in Payroll",
x = "Change in Payroll",
y = "Change in Win Percentage")
cor(baseballSubset$diff_log, baseballSubset$win_pct_change)
baseball %>%
ggplot(aes(x=diff_log, y=win_pct_change, group = team, color=year)) +
geom_point()+
geom_smooth(method="lm", formula=y~x, se=F,color = "red")+
facet_wrap(~team) +
theme_bw() +
theme(legend.position = 0)
cor(baseballSubset$payroll, baseballSubset$win_pct_change)
cor(baseballSubset$diff_log, baseballSubset$win_pct_change)
baseballSubset %>%
ggplot(aes(x = diff_log, y = win_pct_change)) +
geom_point(color = "blue", size= 2) +
labs(title = "MLB Team's Win Percent  vs. Change in Payroll",
x = "Change in Payroll",
y = "Change in Win Percentage")
baseballSubset %>%
ggplot(aes(x = payroll, y = win_pct_change)) +
geom_point(color = "blue", size= 2) +
labs(title = "MLB Team's Win Percent  vs. Change in Payroll",
x = "Change in Payroll",
y = "Change in Win Percentage")
git stash
knitr::opts_chunk$set(echo = FALSE, fig.width=8, fig.height=4)
options(scipen = 0, digits = 3)  # controls base R output
# check if you have ISLR package, if not, install it
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(ISLR, tidyverse, data.table) # add the packages needed
brca <- fread("data/brca_subtype.csv")
knitr::opts_chunk$set(echo = FALSE, fig.width=8, fig.height=4)
options(scipen = 0, digits = 3)  # controls base R output
# check if you have ISLR package, if not, install it
if(!require('pacman')) {install.packages('pacman')}
pacman::p_load(ISLR, tidyverse, data.table) # add the packages needed
brca <- fread("data/brca_subtype.csv")
knitr::opts_chunk$set(echo = FALSE, fig.width = 7, fig.height = 4)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, glmnet, car, data.table, GGally, leaps, gglasso, ggpubr, gridExtra)   #add your packages here
diabetes <- read.csv("diabetic.data.csv")
names(diabetes)
readmission <- read.csv("readmission.csv")
#head(readmission)
#summary(readmission)
#names(readmission)
readmission$race <- as.factor(readmission$race)
readmission$gender <- as.factor(readmission$gender)
#create response variable for readmit within <30 days
readmission$lessThanThirty <- ifelse(readmission$readmitted == "<30", 1, 0)
sum(readmission$lessThanThirty)
p1 <- ggplot(readmission, aes(x = factor(gender), fill = gender)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Greens") +
xlab("gender") +
ggtitle("Distribution of Gender in Cleaned Dataset") +
theme_minimal()
p2<- ggplot(readmission, aes(x = factor(lessThanThirty), fill = gender)) +
geom_bar(stat = "count", width = 0.7, position = position_dodge(), color = "black") +
scale_fill_brewer(palette="Greens") +
xlab("Readmitted Within <30 Days") +
ggtitle("Distribution of Gender with Response Variable") +
theme_minimal()
ggarrange(p1, p2, ncol = 2, nrow = 1)
p3 <- ggplot(readmission, aes(x = factor(race), fill = race)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Reds") +
xlab("race") +
ggtitle("Distribution of Race in Cleaned Dataset") +
theme_minimal()
p4<- ggplot(readmission, aes(x = factor(lessThanThirty), fill = race)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Reds") +
xlab("Readmitted Within <30 Days") +
ggtitle("Distribution of Race with Response Variable") +
theme_minimal()
ggarrange(p3, p4, ncol = 2, nrow = 1)
p5 <- ggplot(readmission, aes(x = factor(age_mod), fill = age_mod)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Blues") +
labs(title = "Distribution of Age in Cleaned Dataset", fill = "Age group", x = "Age group") +
theme_minimal()
p6 <- ggplot(readmission, aes(x = factor(age_mod), fill = gender)) +
geom_bar(stat = "count", width = 0.7, color = "black", position = position_dodge()) +
scale_fill_brewer(palette="Greens") +
labs(title = "Distribution of Gender for Each Age Group", fill = "Gender", x = "Age group") +
theme_minimal()
ggarrange(p5, p6, ncol = 2, nrow = 1)
ggplot(readmission, aes(x = num_medications)) +
geom_boxplot(fill = "pink") +
labs(x = "Number of Medications", title = "Distribution of Number of Medications") +
theme_minimal()
readmission_sub <- readmission %>% select(-encounter_id, -patient_nbr, -readmitted)
readmission_sub %>% filter((gender == "Unknown/Invalid") | (race == "?"))
readmission_sub <- readmission_sub %>% filter((race != "?") & (gender != "Unknown/Invalid") & (diag3_mod != "?"))
readmission_sub <- droplevels(readmission_sub)
#lapply(readmission_sub, unique)
X <- model.matrix(lessThanThirty~., readmission_sub)[,-1]
dim(X)
Y <- readmission_sub$lessThanThirty
#takes a while to run
set.seed(10)
fit1.cv <- cv.glmnet(X, Y,  alpha=1, family="binomial", nfolds = 10, type.measure = "deviance")
plot(fit1.cv)
coef.1se <- coef(fit1.cv, s="lambda.1se")
coef.1se <- coef.1se[which(coef.1se !=0),]
coef.1se
model.3 <- glm(lessThanThirty~ time_in_hospital + num_medications + number_emergency + number_inpatient + number_diagnoses + insulin + diabetesMed + disch_disp_modified + age_mod + diag1_mod + diag2_mod + diag3_mod, family=binomial, data = readmission_sub)
Anova(model.3)
model.2 <- glm(lessThanThirty~ num_procedures + num_medications + number_emergency + number_inpatient + number_diagnoses + A1Cresult + metformin + glipizide + insulin + diabetesMed + disch_disp_modified + adm_src_mod + age_mod + diag1_mod + diag2_mod + diag3_mod, family=binomial, data = readmission_sub)
# sooooo loooooong
anova(model.2, model.3, test = "Chisq")
model.1 <- glm(lessThanThirty~ race + time_in_hospital + num_lab_procedures + num_procedures + num_medications + number_outpatient + number_emergency + number_inpatient + number_diagnoses + max_glu_serum + A1Cresult + metformin + glimepiride + glipizide + glyburide + pioglitazone + rosiglitazone + insulin + change + diabetesMed + disch_disp_modified + adm_src_mod + adm_typ_mod + age_mod + diag1_mod + diag2_mod + diag3_mod, family=binomial, data = readmission_sub)
#make a subset for the variables we got in model 3
variables <- c("time_in_hospital", "num_medications", "number_emergency", "number_impatient", "number_diagnoses", "insulin", "diabetesMed", "disch_disp_modified","age_mod", "diag1_mod", "diag2_mod", "diag3_mod","lessThanThirty")
readmit_sub2 <- readmission_sub[variables]
readmit_sub2 <- readmission_sub[,variables]
readmit_sub2 <- readmission_sub[ ,variables]
readmit_sub2 <- readmission_sub[ ,c("time_in_hospital", "num_medications", "number_emergency", "number_impatient", "number_diagnoses", "insulin", "diabetesMed", "disch_disp_modified","age_mod", "diag1_mod", "diag2_mod", "diag3_mod","lessThanThirty")]
readmission_sub[c("time_in_hospital", "num_medications", "number_emergency", "number_impatient", "number_diagnoses", "insulin", "diabetesMed", "disch_disp_modified","age_mod", "diag1_mod", "diag2_mod", "diag3_mod","lessThanThirty")]
readmission_sub[,c("time_in_hospital", "num_medications", "number_emergency", "number_impatient", "number_diagnoses", "insulin", "diabetesMed", "disch_disp_modified","age_mod", "diag1_mod", "diag2_mod", "diag3_mod","lessThanThirty")]
readmission_sub[c("time_in_hospital", "num_medications", "number_emergency", "number_impatient", "number_diagnoses", "insulin", "diabetesMed", "disch_disp_modified","age_mod", "diag1_mod", "diag2_mod", "diag3_mod","lessThanThirty"),]
readmit_sub2 <- readmission_sub[c("time_in_hospital", "num_medications", "number_emergency", "number_impatient", "number_diagnoses", "insulin", "diabetesMed", "disch_disp_modified","age_mod", "diag1_mod", "diag2_mod", "diag3_mod","lessThanThirty"),]
View(readmit_sub2)
View(readmission_sub)
readmission[1, 1:10]
readmission[1, 1:10]
readmit_sub2 <- readmission_sub[ , variables]
readmit_sub2 <- subset(readmit_sub2, variables)
readmission_sub[ 1:10,variables]
readmission_sub[variables]
readmission_sub[variables,]
readmission_sub2 <- readmission %>% select("race", "gender", "max_glu_serum", "A1Cresult", "metformin", "glimepiride", "glipizide", "glyburide", "pioglitazone", "rosiglitazone", "insulin", "change", "diabetesMed", "disch_disp_modified", "adm_src_mod", "adm_typ_mod", "age_mod", "diag1_mod", "diag2_mod", "diag3_mod")
View(readmit_sub2)
#make a subset for the variables we got in model 3
readmission_sub2 <- readmission %>% select(time_in_hospital, num_medications, number_emergency, number_inpatient, number_diagnoses, insulin, diabetesMed, disch_disp_modified, age_mod, diag1_mod, diag2_mod, diag3_mod)
knitr::opts_chunk$set(echo = FALSE, fig.width = 7, fig.height = 4)
if(!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, ggplot2, glmnet, car, data.table, GGally, leaps, gglasso, ggpubr, gridExtra, pROC)   #add your packages here
diabetes <- read.csv("diabetic.data.csv")
#names(diabetes)
readmission <- read.csv("readmission.csv")
#head(readmission)
#summary(readmission)
#names(readmission)
readmission$race <- as.factor(readmission$race)
readmission$gender <- as.factor(readmission$gender)
#create response variable for readmit within <30 days
readmission$lessThanThirty <- ifelse(readmission$readmitted == "<30", 1, 0)
sum(readmission$lessThanThirty)
p1 <- ggplot(readmission, aes(x = factor(gender), fill = gender)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Greens") +
xlab("gender") +
ggtitle("Distribution of Gender in Cleaned Dataset") +
theme_minimal()
p2<- ggplot(readmission, aes(x = factor(lessThanThirty), fill = gender)) +
geom_bar(stat = "count", width = 0.7, position = position_dodge(), color = "black") +
scale_fill_brewer(palette="Greens") +
xlab("Readmitted Within <30 Days") +
ggtitle("Distribution of Gender with Response Variable") +
theme_minimal()
ggarrange(p1, p2, ncol = 2, nrow = 1)
p3 <- ggplot(readmission, aes(x = factor(race), fill = race)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Reds") +
xlab("race") +
ggtitle("Distribution of Race in Cleaned Dataset") +
theme_minimal()
p4<- ggplot(readmission, aes(x = factor(lessThanThirty), fill = race)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Reds") +
xlab("Readmitted Within <30 Days") +
ggtitle("Distribution of Race with Response Variable") +
theme_minimal()
ggarrange(p3, p4, ncol = 2, nrow = 1)
p5 <- ggplot(readmission, aes(x = factor(age_mod), fill = age_mod)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Blues") +
labs(title = "Distribution of Age in Cleaned Dataset", fill = "Age group", x = "Age group") +
theme_minimal()
p6 <- ggplot(readmission, aes(x = factor(age_mod), fill = gender)) +
geom_bar(stat = "count", width = 0.7, color = "black", position = position_dodge()) +
scale_fill_brewer(palette="Greens") +
labs(title = "Distribution of Gender for Each Age Group", fill = "Gender", x = "Age group") +
theme_minimal()
ggarrange(p5, p6, ncol = 2, nrow = 1)
ggplot(readmission, aes(x = num_medications)) +
geom_boxplot(fill = "pink") +
labs(x = "Number of Medications", title = "Distribution of Number of Medications") +
theme_minimal()
readmission_sub <- readmission %>% select(-encounter_id, -patient_nbr, -readmitted)
nrow(readmission_sub %>% filter((gender == "Unknown/Invalid") | (race == "?")))
readmission_sub <- readmission_sub %>% filter((race != "?") & (gender != "Unknown/Invalid") & (diag3_mod != "?"))
readmission_sub <- droplevels(readmission_sub)
lapply(readmission_sub, unique)
X <- model.matrix(lessThanThirty~., readmission_sub)[,-1]
dim(X)
Y <- readmission_sub$lessThanThirty
#takes a while to run
set.seed(10)
fit1.cv <- cv.glmnet(X, Y,  alpha=1, family="binomial", nfolds = 10, type.measure = "deviance")
plot(fit1.cv)
coef.1se <- coef(fit1.cv, s="lambda.1se")
coef.1se <- coef.1se[which(coef.1se !=0),]
coef.1se
#might want to put these results into the appendix
rownames(as.matrix(coef.1se))
coef.min <- coef(fit1.cv, s="lambda.min")
coef.min <- coef.min[which(coef.min !=0), ]
as.matrix(coef.min)
#might want to put these results into the apendix
beta.min <- rownames(as.matrix(coef.min))
length(beta.min)
model.1 <- glm(lessThanThirty~ race + time_in_hospital + num_lab_procedures + num_procedures + num_medications + number_outpatient + number_emergency + number_inpatient + number_diagnoses + max_glu_serum + A1Cresult + metformin + glimepiride + glipizide + glyburide + pioglitazone + rosiglitazone + insulin + change + diabetesMed + disch_disp_modified + adm_src_mod + adm_typ_mod + age_mod + diag1_mod + diag2_mod + diag3_mod, family=binomial, data = readmission_sub)
#summary(model.1)
#also takes a very long time
Anova(model.1)
model.2 <- glm(lessThanThirty~ num_procedures + num_medications + number_emergency + number_inpatient + number_diagnoses + A1Cresult + metformin + glipizide + insulin + diabetesMed + disch_disp_modified + adm_src_mod + age_mod + diag1_mod + diag2_mod + diag3_mod, family=binomial, data = readmission_sub)
anova(model.2, model.1, test = "Chisq")
Anova(model.2)
model.3 <- glm(lessThanThirty~ time_in_hospital + num_medications + number_emergency + number_inpatient + number_diagnoses + insulin + diabetesMed + disch_disp_modified + age_mod + diag1_mod + diag2_mod + diag3_mod, family=binomial, data = readmission_sub)
rownames(as.matrix(coef.min))
Anova(model.3)
p5 <- ggplot(readmission, aes(x = factor(age_mod), fill = age_mod)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Blues") +
labs(title = "Distribution of Age in Cleaned Dataset", fill = "Age group", x = "Age group") +
theme_minimal()
p6 <- ggplot(readmission, aes(x = factor(age_mod), fill = gender)) +
geom_bar(stat = "count", width = 0.7, color = "black", position = position_dodge()) +
scale_fill_brewer(palette="Greens") +
labs(title = "Distribution of Gender for Each Age Group", fill = "Gender", x = "Age group") +
theme_minimal()
ggarrange(p5, p6, ncol = 2, nrow = 1)
ggplot(readmission, aes(x = num_medications)) +
geom_boxplot(fill = "pink") +
labs(x = "Number of Medications", title = "Distribution of Number of Medications") +
theme_minimal()
p1 <- ggplot(readmission, aes(x = factor(gender), fill = gender)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Greens") +
xlab("gender") +
ggtitle("Distribution of Gender in Cleaned Dataset") +
theme_minimal()
p2<- ggplot(readmission, aes(x = factor(lessThanThirty), fill = gender)) +
geom_bar(stat = "count", width = 0.7, position = position_dodge(), color = "black") +
scale_fill_brewer(palette="Greens") +
xlab("Readmitted Within <30 Days") +
ggtitle("Distribution of Gender with Response Variable") +
theme_minimal()
ggarrange(p1, p2, ncol = 2, nrow = 1)
p3 <- ggplot(readmission, aes(x = factor(race), fill = race)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Reds") +
xlab("race") +
ggtitle("Distribution of Race in Cleaned Dataset") +
theme_minimal()
p4<- ggplot(readmission, aes(x = factor(lessThanThirty), fill = race)) +
geom_bar(stat = "count", width = 0.7, color = "black") +
scale_fill_brewer(palette="Reds") +
xlab("Readmitted Within <30 Days") +
ggtitle("Distribution of Race with Response Variable") +
theme_minimal()
ggarrange(p3, p4, ncol = 2, nrow = 1)
knitr::opts_chunk$set(echo = T, fig.width=8, fig.height=4)
options(scipen = 0, digits = 3)  # controls base R output
# Package setup
if(!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, dplyr, ggplot2, ggthemes, data.table, lubridate,
GGally, RColorBrewer, ggsci, plotROC, usmap,
plotly, ggpubr, vistime)
# county-level socialeconomic information
county_data <- fread("data/covid_county.csv")
